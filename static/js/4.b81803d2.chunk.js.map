{"version":3,"sources":["components/Button/OptionButton.js","components/Button/BasicButton.js","pages/explorer/Modal/FilterModal.js","components/Card/PhotoCard.js","api/client.js","api/explorer.js","utils/index.js","pages/explorer/index.js"],"names":["Button","styled","button","props","selected","css","OptionButton","children","onClick","defaultProps","Title","p","BasicButton","icon","subtitle","title","basic","SubTitle","block","headerToolStyle","color","FilterModal","React","useContext","FilterContext","filters","selectedFilters","setSelectedFilters","filterModalOpen","toggleFilterModal","initFilters","iniJobs","useState","localFilters","setLocalFilters","applyCheck","setApplyCheck","useEffect","applyFliterOption","useCallback","window","localStorage","setItem","JSON","stringify","removeItem","handleLocationBtn","location","undefined","find","e","key","selectedLocation","locations","filter","length","handleCountryBtn","country","countries","handleDropdown","data","options","value","objkey","Modal","size","open","onClose","Header","style","fontSize","Grid","Row","columns","Column","cursor","Icon","name","textAlign","link","Content","container","width","Dropdown","fluid","selection","job_sort","defaultValue","onChange","map","index","text","display","years","Checkbox","label","Actions","primary","sortOptions","careerOptions","onAction","PhotoCard","src","meta","desc","content","Card","minHeight","Image","wrapped","ui","Meta","className","Description","extra","client","axios","create","_getJobs","params","queryString","qs","arrayFormat","get","convertDropdownFormat","newObj","Object","keys","forEach","newValue","createContext","Explorer","setFilterModal","setFilters","jobs","setjobs","init","a","async","defaultFilters","selectedObj","tag_type_id","res","console","dir","findSelected","obj","getDefaultSelected","args","Array","from","arguments","tmpFilters","parse","getItem","jobSort","tmpSelectedFilters","JobCard","job","id","companyId","company","postId","href","title_img","thumb","position","address","reward","formatted_total","Container","margin","floated","paddingLeft","paddingRight","justifyContent","useLoading","pageStart","loadMore","links","next","then","status","hasMore","loader","Message","Provider"],"mappings":"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","file":"static/js/4.b81803d2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  margin-right: 9px;\r\n  margin-bottom: 9px;\r\n  border: 1px solid #e1e2e3;\r\n  padding: 11px 13px;\r\n  font-size: 15px;\r\n  line-height: 1;\r\n  font-weight: 600;\r\n  ${props =>\r\n    props.selected === true\r\n      ? css`\r\n          color: #fff;\r\n          background: #0092fc;\r\n          border-color: #0092fc;\r\n        `\r\n      : css`\r\n          background: #f8f8fa;\r\n          color: #333;\r\n        `}\r\n`;\r\n\r\nconst OptionButton = ({ selected, children, onClick }) => {\r\n  return (\r\n    <Button selected={selected} onClick={onClick}>\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nOptionButton.defaultProps = {\r\n  selected: false,\r\n  onClick: () => {}\r\n};\r\nexport default OptionButton;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nconst Title = styled.p`\r\n  color: #2886fa !important;\r\n  font-weight: 600;\r\n  display: inline-block;\r\n`;\r\n\r\nconst BasicButton = props => {\r\n  const { onClick, icon, subtitle, title } = props;\r\n  return (\r\n    <Button basic onClick={onClick}>\r\n      {icon && icon()}\r\n      {subtitle && `${subtitle} `}\r\n      <Title>{title}</Title>\r\n    </Button>\r\n  );\r\n};\r\n\r\nBasicButton.defaultProps = {\r\n  onClick: () => {},\r\n  icon: null,\r\n  subtitle: null\r\n};\r\nexport default BasicButton;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport * as _ from \"lodash\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Icon,\r\n  Grid,\r\n  Dropdown,\r\n  Checkbox\r\n} from \"semantic-ui-react\";\r\nimport { OptionButton } from \"../../../components/Button/\";\r\n\r\nimport { FilterContext } from \"../index\";\r\n\r\nconst SubTitle = styled.p`\r\n  ${props =>\r\n    props.block\r\n      ? css`\r\n          display: block;\r\n        `\r\n      : css`\r\n          display: inline-block;\r\n        `}\r\n  color: #999;\r\n  font-weight: 400;\r\n  margin: 0 0 10px;\r\n`;\r\n\r\nconst headerToolStyle = {\r\n  color: \"#999\"\r\n};\r\n\r\nconst FilterModal = props => {\r\n  const {\r\n    filters,\r\n    selectedFilters,\r\n    setSelectedFilters,\r\n    filterModalOpen,\r\n    toggleFilterModal,\r\n    initFilters,\r\n    iniJobs\r\n  } = React.useContext(FilterContext);\r\n\r\n  const [localFilters, setLocalFilters] = React.useState(null);\r\n  const [applyCheck, setApplyCheck] = React.useState(false);\r\n\r\n  // componentDidMount\r\n  React.useEffect(() => {\r\n    setLocalFilters(selectedFilters);\r\n  }, [selectedFilters]);\r\n\r\n  // 적용 버튼 이벤트 헨들러\r\n  const applyFliterOption = React.useCallback(() => {\r\n    toggleFilterModal();\r\n    setSelectedFilters(localFilters);\r\n    iniJobs(localFilters);\r\n    if (applyCheck) {\r\n      window.localStorage.setItem(\"filters\", JSON.stringify(localFilters));\r\n    } else {\r\n      window.localStorage.removeItem(\"filters\");\r\n    }\r\n  }, [\r\n    applyCheck,\r\n    iniJobs,\r\n    localFilters,\r\n    setSelectedFilters,\r\n    toggleFilterModal\r\n  ]);\r\n\r\n  const handleLocationBtn = React.useCallback(\r\n    location => {\r\n      const DEFAULT_KEY = \"all\";\r\n      // 이미 선택 된 버튼인지 체크\r\n      function isCheckedLocation() {\r\n        return (\r\n          localFilters[\"locations\"].find(e => e.key === location.key) !==\r\n          undefined\r\n        );\r\n      }\r\n      // 선택\r\n      if (!isCheckedLocation()) {\r\n        let selectedLocation = [];\r\n        // 전체 선택을 하면 전체 하나만 선택하게 변경\r\n        if (location.key === DEFAULT_KEY) {\r\n          selectedLocation = [location];\r\n        }\r\n        // 전체가 아닌 경우는\r\n        else {\r\n          selectedLocation = [\r\n            ...localFilters.locations.filter(e => e.key !== DEFAULT_KEY),\r\n            location\r\n          ];\r\n        }\r\n        setLocalFilters({\r\n          ...localFilters,\r\n          locations: selectedLocation\r\n        });\r\n      }\r\n      // 선택 해제(전체는 클라이언트 이벤트로 해제 불가능)\r\n      else if (location.key !== DEFAULT_KEY) {\r\n        let selectedLocation = [];\r\n        // 아무것도 선택된 것이 없다면 전체를 default로 전체 선택\r\n        if (localFilters.locations.length === 1) {\r\n          selectedLocation = [\r\n            localFilters[\"countries\"].locations.find(e => e.key === DEFAULT_KEY)\r\n          ];\r\n        } else {\r\n          selectedLocation = localFilters.locations.filter(\r\n            e => e.key !== location.key\r\n          );\r\n        }\r\n        setLocalFilters({\r\n          ...localFilters,\r\n          locations: selectedLocation\r\n        });\r\n      }\r\n    },\r\n    [localFilters]\r\n  );\r\n\r\n  const handleCountryBtn = React.useCallback(\r\n    country => {\r\n      const location = country.locations.find(e => e.selected === true);\r\n      setLocalFilters({\r\n        ...localFilters,\r\n        countries: country,\r\n        locations: location !== undefined ? [location] : []\r\n      });\r\n    },\r\n    [localFilters]\r\n  );\r\n\r\n  const handleDropdown = (e, data) => {\r\n    const { options, value } = data;\r\n    const objkey = options[0].objkey;\r\n    setLocalFilters({\r\n      ...selectedFilters,\r\n      [objkey]: options.find(e => e.value === value)\r\n    });\r\n  };\r\n\r\n  const toggleApplyCheckbox = () => {\r\n    setApplyCheck(!applyCheck);\r\n  };\r\n\r\n  if (!filters || !localFilters) return null;\r\n\r\n  return (\r\n    <Modal size=\"tiny\" open={filterModalOpen} onClose={toggleFilterModal}>\r\n      <Modal.Header style={{ fontSize: \"1.1rem\" }}>\r\n        <Grid>\r\n          <Grid.Row columns={3}>\r\n            <Grid.Column onClick={initFilters} style={{ cursor: \"pointer\" }}>\r\n              <Icon name=\"refresh\" size=\"small\" style={headerToolStyle} />\r\n              <SubTitle>초기화</SubTitle>\r\n            </Grid.Column>\r\n            <Grid.Column textAlign=\"center\">필터</Grid.Column>\r\n            <Grid.Column textAlign=\"right\">\r\n              <Icon\r\n                link\r\n                name=\"close\"\r\n                onClick={toggleFilterModal}\r\n                style={headerToolStyle}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Modal.Header>\r\n\r\n      <Modal.Content>\r\n        <Grid container>\r\n          <Grid.Row>\r\n            <Grid.Column width={16}>\r\n              <SubTitle>정렬</SubTitle>\r\n              <Dropdown\r\n                key={localFilters[\"job_sort\"].key}\r\n                fluid\r\n                selection\r\n                options={filters.job_sort}\r\n                defaultValue={localFilters[\"job_sort\"].value}\r\n                onChange={handleDropdown}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column width={16}>\r\n              <SubTitle>국가</SubTitle>\r\n              <div>\r\n                {filters.countries.map((country, index) => (\r\n                  <OptionButton\r\n                    key={index}\r\n                    selected={localFilters[\"countries\"].value === country.value}\r\n                    onClick={() => handleCountryBtn(country)}\r\n                  >\r\n                    {country.text}\r\n                  </OptionButton>\r\n                ))}\r\n              </div>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n\r\n          <Grid.Row>\r\n            <Grid.Column width={16}>\r\n              <SubTitle block>지역</SubTitle>\r\n              {localFilters[\"countries\"].locations.map((location, index) => (\r\n                <OptionButton\r\n                  key={index}\r\n                  selected={\r\n                    localFilters[\"locations\"].find(\r\n                      e => e.key === location.key\r\n                    ) !== undefined\r\n                  }\r\n                  onClick={() => handleLocationBtn(location)}\r\n                >\r\n                  {location.display}\r\n                </OptionButton>\r\n              ))}\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n\r\n          <Grid.Row>\r\n            <Grid.Column width={16}>\r\n              <SubTitle>경력</SubTitle>\r\n              <Dropdown\r\n                key={localFilters[\"years\"].key}\r\n                fluid\r\n                selection\r\n                options={filters.years}\r\n                defaultValue={localFilters[\"years\"].value}\r\n                onChange={handleDropdown}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n\r\n          <Grid.Row>\r\n            <Grid.Column width={16}>\r\n              {/* TODO: localstorage 이용 */}\r\n              <Checkbox\r\n                label=\"적용된 필터를 저장하고 유지합니다.\"\r\n                onChange={toggleApplyCheckbox}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Modal.Content>\r\n\r\n      <Modal.Actions>\r\n        {/* 적용 버튼 */}\r\n        <Button primary onClick={applyFliterOption}>\r\n          적용\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nFilterModal.defaultProps = {\r\n  open: false,\r\n  sortOptions: [],\r\n  careerOptions: [],\r\n  onClose: () => {},\r\n  onAction: () => {}\r\n};\r\n\r\nexport default FilterModal;\r\n","import React from \"react\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\n\r\nconst PhotoCard = props => {\r\n  const { src, title, meta, desc, content } = props;\r\n\r\n  return (\r\n    <Card style={{ cursor: \"pointer\", minHeight: \"380px\" }}>\r\n      <Image src={src} wrapped ui={false} />\r\n      <Card.Content>\r\n        <Card.Header>{title}</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">{meta}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{desc}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>{content}</Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nPhotoCard.defaultProps = {\r\n  src: \"\",\r\n  title: \"\",\r\n  meta: \"\",\r\n  desc: \"\"\r\n};\r\nexport default PhotoCard;\r\n","import axios from \"axios\";\r\n\r\nconst client = axios.create();\r\n\r\n// client.defaults.baseURL = \"https://www.wanted.co.kr\";\r\n\r\nexport default client;\r\n","import qs from \"qs\";\r\nimport client from \"./client\";\r\n\r\nconst API_VERSION = \"/api/v4\";\r\n\r\nexport const _getFilters = () => client.get(`${API_VERSION}/filters`);\r\n\r\nexport const _getJobs = params => {\r\n  const queryString = qs.stringify(params, { arrayFormat: \"repeat\" });\r\n  return client.get(`${API_VERSION}/jobs?${queryString}`);\r\n};\r\n","/**\r\n *  유니코드인지 체크 함수\r\n *\r\n * @param {string} s\r\n * @returns {string}\r\n */\r\nconst isUnicode = s => {\r\n  return /[^\\u0000-\\u00ff]/.test(s);\r\n};\r\n\r\n/**\r\n * 유니코드 디코딩\r\n * @param {string} s\r\n * @returns {string}\r\n */\r\nexport const decodeUnicode = s => {\r\n  if (isUnicode(s))\r\n    return decodeURIComponent(JSON.parse('\"' + s.replace(/\\\"/g, '\\\\\"') + '\"'));\r\n  else return s;\r\n};\r\n\r\n/**\r\n * semantic ui > dropdown 데이터 포맷에 맞게 변환\r\n * 예시) {key: [{key:0, value: \"job.latest_order\", text: \"최신순\"}]\r\n *\r\n * @param {array}   data\r\n * @param {string}  value\r\n * @param {string}  text\r\n * @returns {object}\r\n */\r\nexport const convertDropdownFormat = (data, value, text) => {\r\n  let newObj = {};\r\n  Object.keys(data).forEach(key => {\r\n    const newValue = data[key].map(e => ({\r\n      ...e,\r\n      objkey: key,\r\n      value: e[value],\r\n      text: e[text]\r\n    }));\r\n    newObj[key] = newValue;\r\n  });\r\n  return newObj;\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from \"react\";\r\n// components\r\nimport { Container, Grid, Icon, Message } from \"semantic-ui-react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport FilterModal from \"./Modal/FilterModal\";\r\nimport { BasicButton } from \"../../components/Button\";\r\nimport PhotoCard from \"../../components/Card/PhotoCard\";\r\n// api\r\nimport client from \"../../api/client\";\r\nimport { _getFilters, _getJobs } from \"../../api/explorer\";\r\n// utils\r\nimport { convertDropdownFormat } from \"../../utils\";\r\n// hooks\r\nimport useLoading from \"../../hooks/useLoading\";\r\n\r\nexport const FilterContext = React.createContext(null);\r\n\r\nconst Explorer = () => {\r\n  const [filterModalOpen, setFilterModal] = React.useState(false);\r\n  const [filters, setFilters] = React.useState(null);\r\n  const [selectedFilters, setSelectedFilters] = React.useState(null);\r\n  const [jobs, setjobs] = React.useState(null);\r\n\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  const init = async () => {\r\n    // 필터 값 초기화\r\n    const defaultFilters = await initFilters();\r\n    // 필터 값 기반으로 채용 회사 리스트 조회\r\n    await iniJobs(defaultFilters);\r\n  };\r\n\r\n  const iniJobs = async selectedObj => {\r\n    try {\r\n      const { data: res } = await _getJobs({\r\n        country: selectedObj.countries.key,\r\n        tag_type_id: 669,\r\n        job_sort: selectedObj.job_sort.key,\r\n        years: selectedObj.years.key,\r\n        locations: selectedObj.locations.map(e => e.key)\r\n      });\r\n      setjobs(res);\r\n    } catch (e) {\r\n      console.dir(e);\r\n    }\r\n  };\r\n\r\n  const initFilters = async () => {\r\n    const findSelected = obj => obj.selected === true;\r\n    const getDefaultSelected = obj => {\r\n      return function() {\r\n        const args = Array.from(arguments);\r\n        return args.map(key => obj[key].find(findSelected));\r\n      };\r\n    };\r\n    // call restful api for getting filter options\r\n    try {\r\n      const { data: defaultFilters } = await _getFilters();\r\n      const tmpFilters = convertDropdownFormat(\r\n        defaultFilters,\r\n        \"key\",\r\n        \"display\"\r\n      );\r\n      setFilters(tmpFilters);\r\n\r\n      // 필터 저장 기능을 사용 중이면 localstorage를 이용\r\n      const localFilters = JSON.parse(window.localStorage.getItem(\"filters\"));\r\n      if (localFilters) {\r\n        setSelectedFilters(localFilters);\r\n        return localFilters;\r\n      }\r\n      const [jobSort, countries, years] = getDefaultSelected(tmpFilters)(\r\n        \"job_sort\",\r\n        \"countries\",\r\n        \"years\"\r\n      );\r\n      const locations = countries.locations.find(findSelected);\r\n      const tmpSelectedFilters = {\r\n        job_sort: jobSort,\r\n        countries: countries,\r\n        years: years,\r\n        locations: locations !== undefined ? [locations] : []\r\n      };\r\n      setSelectedFilters(tmpSelectedFilters);\r\n      return tmpSelectedFilters;\r\n    } catch (e) {\r\n      console.dir(e);\r\n    }\r\n  };\r\n\r\n  const loadJobs = () => {\r\n    client.get(jobs.links.next).then(res => {\r\n      const { data, status } = res;\r\n      // TODO: 예외처리\r\n      if (status !== 200) return;\r\n      setjobs({\r\n        data: [...jobs.data, ...data.data],\r\n        links: data.links\r\n      });\r\n    });\r\n  };\r\n\r\n  const toggleFilterModal = () => {\r\n    setFilterModal(!filterModalOpen);\r\n  };\r\n\r\n  // 카드 선택 시, 해당 job 페이지로 이동\r\n  const moveJobPage = (companyId, postId) => {\r\n    window.location.href = `https://www.wanted.co.kr/wd/${postId}?referer_id=${companyId}`;\r\n  };\r\n\r\n  const JobCard = job => (\r\n    <Grid.Column\r\n      width={4}\r\n      key={job.id}\r\n      onClick={() => moveJobPage(job.company.id, job.id)}\r\n    >\r\n      <PhotoCard\r\n        src={job.title_img.thumb}\r\n        title={job.position}\r\n        meta={`${job.address.location} ${job.address.country}`}\r\n        desc={job.company.name}\r\n        content={`채용 보상금 ${job.reward.formatted_total}`}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      {/* Filter */}\r\n      <Grid style={{ margin: \"10px 0\" }}>\r\n        <Grid.Column floated=\"left\" width={10} style={{ paddingLeft: \"0px\" }}>\r\n          {selectedFilters && (\r\n            <>\r\n              <BasicButton\r\n                onClick={toggleFilterModal}\r\n                title={selectedFilters[\"job_sort\"].text}\r\n              />\r\n              <BasicButton\r\n                title={selectedFilters[\"countries\"].text}\r\n                subtitle=\"국가\"\r\n                onClick={toggleFilterModal}\r\n              />\r\n              {selectedFilters[\"locations\"].length > 0 && (\r\n                <BasicButton\r\n                  title={selectedFilters[\"locations\"][0].display}\r\n                  subtitle=\"지역\"\r\n                  onClick={toggleFilterModal}\r\n                />\r\n              )}\r\n              <BasicButton\r\n                title={selectedFilters[\"years\"].text}\r\n                subtitle=\"경력\"\r\n                onClick={toggleFilterModal}\r\n              />\r\n            </>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column\r\n          floated=\"right\"\r\n          width={5}\r\n          style={{\r\n            paddingRight: \"0px\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n          }}\r\n        >\r\n          <BasicButton\r\n            icon={() => <Icon name=\"filter\" style={{ color: \"#2886fa\" }} />}\r\n            title=\"필터\"\r\n            onClick={toggleFilterModal}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n      {/* AD Company List */}\r\n      {/* General Company List */}\r\n      {/* {jobs && (\r\n        <InfiniteScroll\r\n          dataLength={jobs.data.length}\r\n          next={loadJobs}\r\n          hasMore={jobs.links.next}\r\n          loader={useLoading}\r\n        >\r\n          <Grid>{jobs.data.map(job => JobCard(job))}</Grid>\r\n        </InfiniteScroll>\r\n      )} */}\r\n      {!jobs && useLoading()}\r\n      {jobs && jobs.data && (\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={loadJobs}\r\n          hasMore={jobs.links.next !== null}\r\n          loader={<p key={0}>Loading...</p>}\r\n        >\r\n          <Grid>{jobs.data.map(job => JobCard(job))}</Grid>\r\n        </InfiniteScroll>\r\n      )}\r\n      {jobs && !jobs.data && (\r\n        <Message>\r\n          <Message.Header>\r\n            <Icon name=\"warning\" />\r\n            결과를 찾지 못했습니다.\r\n          </Message.Header>\r\n          <p>필터링 옵션을 다시 설정해주세요.</p>\r\n        </Message>\r\n      )}\r\n      {/* Modal */}\r\n      <FilterContext.Provider\r\n        value={{\r\n          filters,\r\n          selectedFilters,\r\n          setSelectedFilters,\r\n          filterModalOpen,\r\n          toggleFilterModal,\r\n          initFilters,\r\n          iniJobs\r\n        }}\r\n      >\r\n        <FilterModal />\r\n      </FilterContext.Provider>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Explorer;\r\n"],"sourceRoot":""}